#!/usr/bin/python
"""
Even Fibbonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

		By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Code solution:
	Use a generator to yield numbers in the Fibonacci sequence and appropriately sum up

Non-code solution:

Observations
1) We know that the ratio of Fib. sequence terms approches phi.
2) Every 3rd term in the sequence is even

We can approximate the sum of Fib. sequences by an exponential (phi). If we multiply
the base by 3 we can get the progression of even Fib. numbers. We can find the highest
term by looking for log_3phi(4 million). And the sum is found by integrating the exponential.

xies @ mit August 2013

"""


def get_fibonacci(second_last,last):
	# generator of Fibbonacci sequence
	while True:
		number = second_last + last
		second_last = last
		last = number
		yield number

def problem2():
	
	total = 0
	for term in get_fibonacci(0,1):
		if term < 4000000:
			if term % 2 == 0:
				total += term
		else:
			print total
			return

if __name__ == '__main__':
	problem2()
